{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useEventSystem = void 0;\n\nvar react_1 = require(\"react\");\n\nvar error_messages_1 = require(\"../constants/error-messages\");\n\nvar is_browser_environment_1 = require(\"../constants/is-browser-environment\");\n/**\n * An array of dispatch event methods from within the mounted event systems.\n * This allows an event to be dispatched within all of the event system\n * instances.\n */\n\n\nvar mountedEventDispatchers = [];\n/**\n * Dispatches an event to all mounted event systems.\n * @param eventName The name of the event to dispatch.\n * @param parameters The parameters to pass to the event listener.\n */\n\nvar dispatchReactUnityEvent = function (eventName) {\n  var parameters = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    parameters[_i - 1] = arguments[_i];\n  } // Loops through all of the mounted event systems and dispatches the event.\n  // In case there are multiple event systems, the return value origin is\n  // undefined.\n\n\n  var returnValue = undefined;\n  mountedEventDispatchers.forEach(function (dispatchEvent) {\n    returnValue = dispatchEvent.apply(void 0, __spreadArray([eventName], parameters, false));\n  });\n  return returnValue;\n};\n\nif (is_browser_environment_1.isBrowserEnvironment === true) {\n  // It is possible for the application being rendered server side. We'll check\n  // if the app is running in a browser environment and if so, we'll make the\n  // dispatch React Unity event function available to the global scope.\n  window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n}\n/**\n * Event system for invoking external React Unity events.\n * @returns The Event System hook.\n */\n\n\nvar useEventSystem = function () {\n  /**\n   * An array of all registered event listeners.\n   */\n  var eventListeners = (0, react_1.useRef)([]);\n  /**\n   * Adds an event listener for external React Unity events.\n   */\n\n  var addEventListener = (0, react_1.useCallback)(\n  /**\n   * @param eventName The name of the event to listen to.\n   * @param callback The callback to invoke when the event is fired.\n   */\n  function (eventName, callback) {\n    // Add the event listener will be added to the array of event listeners.\n    eventListeners.current = __spreadArray(__spreadArray([], eventListeners.current, true), [{\n      eventName: eventName,\n      callback: callback\n    }], false);\n  }, [eventListeners]);\n  /**\n   * Removes an event listener for external React Unity events.\n   */\n\n  var removeEventListener = (0, react_1.useCallback)(\n  /**\n   * @param eventName The name of the event to remove.\n   * @param callback The callback to remove.\n   */\n  function (eventName, callback) {\n    // The event listener will be filtered from the event listeners array\n    // based on its name and the reference to the callback.\n    eventListeners.current = eventListeners.current.filter(function (eventListener) {\n      return eventListener.eventName !== eventName && eventListener.callback !== callback;\n    });\n  }, [eventListeners]);\n  /**\n   * Dispatches an event.\n   */\n\n  var dispatchEvent = (0, react_1.useCallback)(\n  /**\n   * @param eventName The name of the event to dispatch.\n   * @param parameters The parameters to pass to the event listener.\n   */\n  function (eventName) {\n    var parameters = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      parameters[_i - 1] = arguments[_i];\n    } // The event listener will be filtered from the event listeners array\n    // based on its name.\n\n\n    var eventListener = eventListeners.current.find(function (eventListener) {\n      return eventListener.eventName === eventName;\n    });\n\n    if (typeof eventListener === \"undefined\") {\n      // Guarding the event listener.\n      console.warn(error_messages_1.errorMessages.noEventListener, {\n        eventName: eventName\n      });\n      return;\n    } // The event listener will be invoked with the parameters.\n\n\n    return eventListener.callback.apply(eventListener, parameters);\n  }, [eventListeners]); // Effect ensures that the dispatch event function is available to the\n  // global array of event listeners. This allows the global method to dispatch\n  // events within the event system hooks.\n\n  (0, react_1.useEffect)(function () {\n    mountedEventDispatchers.push(dispatchEvent);\n    return function () {\n      mountedEventDispatchers.splice(mountedEventDispatchers.indexOf(dispatchEvent), 1);\n    };\n  }, [dispatchEvent]);\n  return {\n    addEventListener: addEventListener,\n    removeEventListener: removeEventListener\n  };\n};\n\nexports.useEventSystem = useEventSystem;","map":{"version":3,"sources":["/Users/sebastian/Documents/GitHub/sebas.me/node_modules/react-unity-webgl/distribution/hooks/use-event-system.js"],"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","Object","defineProperty","exports","value","useEventSystem","react_1","require","error_messages_1","is_browser_environment_1","mountedEventDispatchers","dispatchReactUnityEvent","eventName","parameters","_i","returnValue","undefined","forEach","dispatchEvent","apply","isBrowserEnvironment","window","eventListeners","useRef","addEventListener","useCallback","callback","current","removeEventListener","filter","eventListener","find","console","warn","errorMessages","noEventListener","useEffect","push","splice","indexOf"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useEventSystem = void 0;\nvar react_1 = require(\"react\");\nvar error_messages_1 = require(\"../constants/error-messages\");\nvar is_browser_environment_1 = require(\"../constants/is-browser-environment\");\n/**\n * An array of dispatch event methods from within the mounted event systems.\n * This allows an event to be dispatched within all of the event system\n * instances.\n */\nvar mountedEventDispatchers = [];\n/**\n * Dispatches an event to all mounted event systems.\n * @param eventName The name of the event to dispatch.\n * @param parameters The parameters to pass to the event listener.\n */\nvar dispatchReactUnityEvent = function (eventName) {\n    var parameters = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        parameters[_i - 1] = arguments[_i];\n    }\n    // Loops through all of the mounted event systems and dispatches the event.\n    // In case there are multiple event systems, the return value origin is\n    // undefined.\n    var returnValue = undefined;\n    mountedEventDispatchers.forEach(function (dispatchEvent) {\n        returnValue = dispatchEvent.apply(void 0, __spreadArray([eventName], parameters, false));\n    });\n    return returnValue;\n};\nif (is_browser_environment_1.isBrowserEnvironment === true) {\n    // It is possible for the application being rendered server side. We'll check\n    // if the app is running in a browser environment and if so, we'll make the\n    // dispatch React Unity event function available to the global scope.\n    window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n}\n/**\n * Event system for invoking external React Unity events.\n * @returns The Event System hook.\n */\nvar useEventSystem = function () {\n    /**\n     * An array of all registered event listeners.\n     */\n    var eventListeners = (0, react_1.useRef)([]);\n    /**\n     * Adds an event listener for external React Unity events.\n     */\n    var addEventListener = (0, react_1.useCallback)(\n    /**\n     * @param eventName The name of the event to listen to.\n     * @param callback The callback to invoke when the event is fired.\n     */\n    function (eventName, callback) {\n        // Add the event listener will be added to the array of event listeners.\n        eventListeners.current = __spreadArray(__spreadArray([], eventListeners.current, true), [\n            { eventName: eventName, callback: callback },\n        ], false);\n    }, [eventListeners]);\n    /**\n     * Removes an event listener for external React Unity events.\n     */\n    var removeEventListener = (0, react_1.useCallback)(\n    /**\n     * @param eventName The name of the event to remove.\n     * @param callback The callback to remove.\n     */\n    function (eventName, callback) {\n        // The event listener will be filtered from the event listeners array\n        // based on its name and the reference to the callback.\n        eventListeners.current = eventListeners.current.filter(function (eventListener) {\n            return eventListener.eventName !== eventName &&\n                eventListener.callback !== callback;\n        });\n    }, [eventListeners]);\n    /**\n     * Dispatches an event.\n     */\n    var dispatchEvent = (0, react_1.useCallback)(\n    /**\n     * @param eventName The name of the event to dispatch.\n     * @param parameters The parameters to pass to the event listener.\n     */\n    function (eventName) {\n        var parameters = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parameters[_i - 1] = arguments[_i];\n        }\n        // The event listener will be filtered from the event listeners array\n        // based on its name.\n        var eventListener = eventListeners.current.find(function (eventListener) { return eventListener.eventName === eventName; });\n        if (typeof eventListener === \"undefined\") {\n            // Guarding the event listener.\n            console.warn(error_messages_1.errorMessages.noEventListener, { eventName: eventName });\n            return;\n        }\n        // The event listener will be invoked with the parameters.\n        return eventListener.callback.apply(eventListener, parameters);\n    }, [eventListeners]);\n    // Effect ensures that the dispatch event function is available to the\n    // global array of event listeners. This allows the global method to dispatch\n    // events within the event system hooks.\n    (0, react_1.useEffect)(function () {\n        mountedEventDispatchers.push(dispatchEvent);\n        return function () {\n            mountedEventDispatchers.splice(mountedEventDispatchers.indexOf(dispatchEvent), 1);\n        };\n    }, [dispatchEvent]);\n    return {\n        addEventListener: addEventListener,\n        removeEventListener: removeEventListener,\n    };\n};\nexports.useEventSystem = useEventSystem;\n"]},"metadata":{},"sourceType":"script"}