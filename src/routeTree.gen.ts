/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TetrisImport } from './routes/tetris'
import { Route as ProprioceptionImport } from './routes/proprioception'
import { Route as BadmintonImport } from './routes/badminton'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TetrisRoute = TetrisImport.update({
  id: '/tetris',
  path: '/tetris',
  getParentRoute: () => rootRoute,
} as any)

const ProprioceptionRoute = ProprioceptionImport.update({
  id: '/proprioception',
  path: '/proprioception',
  getParentRoute: () => rootRoute,
} as any)

const BadmintonRoute = BadmintonImport.update({
  id: '/badminton',
  path: '/badminton',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/badminton': {
      id: '/badminton'
      path: '/badminton'
      fullPath: '/badminton'
      preLoaderRoute: typeof BadmintonImport
      parentRoute: typeof rootRoute
    }
    '/proprioception': {
      id: '/proprioception'
      path: '/proprioception'
      fullPath: '/proprioception'
      preLoaderRoute: typeof ProprioceptionImport
      parentRoute: typeof rootRoute
    }
    '/tetris': {
      id: '/tetris'
      path: '/tetris'
      fullPath: '/tetris'
      preLoaderRoute: typeof TetrisImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/badminton': typeof BadmintonRoute
  '/proprioception': typeof ProprioceptionRoute
  '/tetris': typeof TetrisRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/badminton': typeof BadmintonRoute
  '/proprioception': typeof ProprioceptionRoute
  '/tetris': typeof TetrisRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/badminton': typeof BadmintonRoute
  '/proprioception': typeof ProprioceptionRoute
  '/tetris': typeof TetrisRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/badminton' | '/proprioception' | '/tetris'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/badminton' | '/proprioception' | '/tetris'
  id: '__root__' | '/' | '/badminton' | '/proprioception' | '/tetris'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BadmintonRoute: typeof BadmintonRoute
  ProprioceptionRoute: typeof ProprioceptionRoute
  TetrisRoute: typeof TetrisRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BadmintonRoute: BadmintonRoute,
  ProprioceptionRoute: ProprioceptionRoute,
  TetrisRoute: TetrisRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/badminton",
        "/proprioception",
        "/tetris"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/badminton": {
      "filePath": "badminton.tsx"
    },
    "/proprioception": {
      "filePath": "proprioception.tsx"
    },
    "/tetris": {
      "filePath": "tetris.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
